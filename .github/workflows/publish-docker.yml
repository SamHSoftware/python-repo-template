name: Publish Docker
on:
  push:
    tags: [ '*' ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest                        # Choosing the github runner.
    permissions:
      contents: read                              # Let's actions read the repo.
      packages: write                             # Required to push to the GHCR.
    steps:
      - uses: actions/checkout@v4                 # Checks out repo to access Dockerfile and code.

      - uses: docker/setup-qemu-action@v3         # Allows for non-native CPU arch builds (if needed). 
      - uses: docker/setup-buildx-action@v3       # Sets up the builder. 

      - name: Log in to GHCR
        uses: docker/login-action@v3              # The official action.
        with:
          registry: ghcr.io                       # Target registry (GHCR).
          username: ${{ github.actor }}           # Users the GitHub user, injected by GitHub at runtime.
          password: ${{ secrets.GITHUB_TOKEN }}   # Uses the workflows GITHUB_TOKEN (built-in-secret) which has packages:write permissions, as above. Also injected at runtime.

      - name: Extract tags & labels
        id: meta                                  # Important to reference the output of this step later on.
        uses: docker/metadata-action@v5           # Outputs tags and labels.
        with:
          images: ghcr.io/${{ github.repository }} # The base-name we're going to tag.
          tags: |
            type=ref,event=branch 
            type=semver,pattern={{version}}
            type=sha

      - name: Build and push
        uses: docker/build-push-action@v6          # The official build/push action.
        with:
          context: .                               # Use the context in the root. Where the Dockerfile lives.
          # platforms: linux/amd64,linux/arm64       # Build images for different systems.
          push: true
          tags: ${{ steps.meta.outputs.tags }}     # Add on the tags we collected to the image name.
          labels: ${{ steps.meta.outputs.labels }} # Add the labels we collected to the docker metadata.
          cache-from: type=gha                     # Import cache from GitHib Action's cache to speed up subsequent builds.
          cache-to: type=gha,mode=max              # Export cache to GitHub Actions after the build finishes.
